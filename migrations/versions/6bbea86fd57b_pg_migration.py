"""pg migration

Revision ID: 6bbea86fd57b
Revises: f2f879867586
Create Date: 2025-10-05 00:22:29.098839

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6bbea86fd57b'
down_revision: Union[str, None] = 'f2f879867586'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('categories', 'id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    existing_nullable=False,
                    autoincrement=True)
    op.alter_column('categories', 'name',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=100),
                    nullable=False)
    op.execute('DROP INDEX IF EXISTS "idx_16459_sqlite_autoindex_categories_1"')
    op.create_unique_constraint(None, 'categories', ['name'])
    op.alter_column('invite_codes', 'id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    existing_nullable=False,
                    autoincrement=True)
    op.alter_column('invite_codes', 'code',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=64),
                    nullable=False)
    op.alter_column('invite_codes', 'used',
                    existing_type=sa.BOOLEAN(),
                    nullable=False)
    op.alter_column('invite_codes', 'created_at',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    nullable=False,
                    existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.execute('DROP INDEX IF EXISTS "idx_16510_ix_invite_codes_code"')
    op.create_unique_constraint(None, 'invite_codes', ['code'])
    op.alter_column('items', 'id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    existing_nullable=False,
                    autoincrement=True)
    op.alter_column('items', 'name',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=100),
                    nullable=False)
    op.alter_column('items', 'category_id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    existing_nullable=True)
    op.alter_column('items', 'modifications',
                    existing_type=sa.TEXT(),
                    type_=sa.String(),
                    existing_nullable=True)
    op.execute('DROP INDEX IF EXISTS "idx_16464_ix_items_name"')
    op.create_index(op.f('ix_items_category_id'), 'items', ['category_id'], unique=False)
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")
    op.add_column(
        'items',
        sa.Column(
            'search_vector',
            postgresql.TSVECTOR(),
            sa.Computed("to_tsvector('russian', coalesce(name,''))", persisted=True),
            nullable=False
        )
    )
    op.create_index('ix_items_search_vector', 'items', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('ix_items_name_trgm', 'items', [sa.text('name gin_trgm_ops')], unique=False, postgresql_using='gin')
    op.create_unique_constraint(None, 'items', ['name'])
    op.alter_column('price_history', 'id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    existing_nullable=False,
                    autoincrement=True)
    op.alter_column('price_history', 'item_id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    nullable=False)
    op.alter_column('price_history', 'price',
                    existing_type=sa.BIGINT(),
                    nullable=False)
    op.alter_column('price_history', 'currency',
                    existing_type=sa.TEXT(),
                    nullable=False)
    op.alter_column('price_history', 'timestamp',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    nullable=False,
                    existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.execute('DROP INDEX IF EXISTS "idx_16469_ix_price_history_item_id"')
    op.create_index(op.f('ix_price_history_item_id'), 'price_history', ['item_id'], unique=False)
    op.create_index('ix_price_history_item_ts', 'price_history', ['item_id', 'timestamp'], unique=False)
    op.create_index('ix_price_history_timestamp', 'price_history', ['timestamp'], unique=False)
    op.alter_column('users', 'id',
                    existing_type=sa.BIGINT(),
                    type_=sa.Integer(),
                    existing_nullable=False,
                    autoincrement=True)
    op.alter_column('users', 'username',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=64),
                    nullable=False)
    op.alter_column('users', 'hashed_password',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=255),
                    nullable=False)
    op.alter_column('users', 'is_active',
                    existing_type=sa.BOOLEAN(),
                    nullable=False)
    op.alter_column('users', 'created_at',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    nullable=False,
                    existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.execute('DROP INDEX IF EXISTS "idx_16516_ix_users_username"')
    op.create_unique_constraint(None, 'users', ['username'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index(op.f('idx_16516_ix_users_username'), 'users', ['username'], unique=True)
    op.alter_column('users', 'created_at',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    nullable=True,
                    existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'is_active',
                    existing_type=sa.BOOLEAN(),
                    nullable=True)
    op.alter_column('users', 'hashed_password',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    nullable=True)
    op.alter_column('users', 'username',
                    existing_type=sa.String(length=64),
                    type_=sa.TEXT(),
                    nullable=True)
    op.alter_column('users', 'id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    existing_nullable=False,
                    autoincrement=True)
    op.drop_index('ix_price_history_timestamp', table_name='price_history')
    op.drop_index('ix_price_history_item_ts', table_name='price_history')
    op.drop_index(op.f('ix_price_history_item_id'), table_name='price_history')
    op.create_index(op.f('idx_16469_ix_price_history_item_id'), 'price_history', ['item_id'], unique=False)
    op.alter_column('price_history', 'timestamp',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    nullable=True,
                    existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('price_history', 'currency',
                    existing_type=sa.TEXT(),
                    nullable=True)
    op.alter_column('price_history', 'price',
                    existing_type=sa.BIGINT(),
                    nullable=True)
    op.alter_column('price_history', 'item_id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    nullable=True)
    op.alter_column('price_history', 'id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    existing_nullable=False,
                    autoincrement=True)
    op.drop_constraint(None, 'items', type_='unique')
    op.drop_index('ix_items_name_trgm', table_name='items', postgresql_using='gin')
    op.drop_index('ix_items_search_vector', table_name='items', postgresql_using='gin')
    op.drop_index(op.f('ix_items_category_id'), table_name='items')
    op.drop_column('items', 'search_vector')
    op.create_index(op.f('idx_16464_ix_items_name'), 'items', ['name'], unique=True)
    op.alter_column('items', 'modifications',
                    existing_type=sa.String(),
                    type_=sa.TEXT(),
                    existing_nullable=True)
    op.alter_column('items', 'category_id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    existing_nullable=True)
    op.alter_column('items', 'name',
                    existing_type=sa.String(length=100),
                    type_=sa.TEXT(),
                    nullable=True)
    op.alter_column('items', 'id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    existing_nullable=False,
                    autoincrement=True)
    op.drop_constraint(None, 'invite_codes', type_='unique')
    op.create_index(op.f('idx_16510_ix_invite_codes_code'), 'invite_codes', ['code'], unique=True)
    op.alter_column('invite_codes', 'created_at',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    nullable=True,
                    existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('invite_codes', 'used',
                    existing_type=sa.BOOLEAN(),
                    nullable=True)
    op.alter_column('invite_codes', 'code',
                    existing_type=sa.String(length=64),
                    type_=sa.TEXT(),
                    nullable=True)
    op.alter_column('invite_codes', 'id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    existing_nullable=False,
                    autoincrement=True)
    op.drop_constraint(None, 'categories', type_='unique')
    op.create_index(op.f('idx_16459_sqlite_autoindex_categories_1'), 'categories', ['name'], unique=True)
    op.alter_column('categories', 'name',
                    existing_type=sa.String(length=100),
                    type_=sa.TEXT(),
                    nullable=True)
    op.alter_column('categories', 'id',
                    existing_type=sa.Integer(),
                    type_=sa.BIGINT(),
                    existing_nullable=False,
                    autoincrement=True)
    # ### end Alembic commands ###
